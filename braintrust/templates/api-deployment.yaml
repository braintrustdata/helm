apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.api.name }}
  namespace: {{ include "braintrust.namespace" . }}
  {{- with (merge .Values.global.labels .Values.api.labels) }}
  labels:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.api.annotations.deployment }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.api.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.api.name }}
        {{- if eq .Values.cloud "azure" }}
        azure.workload.identity/use: "true"
        {{- end }}
        {{- with (merge .Values.global.labels .Values.api.labels) }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.api.annotations.pod }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.api.serviceAccount.name }}
      {{- with .Values.api.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: api
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          {{- with .Values.api.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.api.service.port }}
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ .Values.api.name }}
          env:
            - name: PG_URL
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: PG_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: REDIS_URL
            - name: FUNCTION_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: FUNCTION_SECRET_KEY
            - name: BRAINSTORE_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: BRAINSTORE_LICENSE_KEY
            {{- if eq .Values.cloud "azure" }}
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: AZURE_STORAGE_CONNECTION_STRING
            {{- end }}
            {{- if eq .Values.cloud "google" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: GCS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: braintrust-secrets
                  key: GCS_SECRET_ACCESS_KEY
            {{- end }}
            {{- if .Values.api.extraEnvVars }}
            {{- toYaml .Values.api.extraEnvVars | nindent 12 }}
            {{- end }}
            {{- if .Values.realtime.enabled }}
            - name: REALTIME_URL
              value: "http://{{ .Values.realtime.service.name | default .Values.realtime.name }}:{{ .Values.realtime.service.port }}"
            {{- end }}
            {{- if and .Values.redisTls.enabled (eq .Values.cloud "google") }}
            - name: NODE_EXTRA_CA_CERTS
              value: "/etc/redis/redis-bundle.pem"
            {{- end }}
          {{- if or .Values.azureKeyVaultCSI.enabled (and .Values.redisTls.enabled (eq .Values.cloud "google")) }}
          volumeMounts:
            {{- if .Values.azureKeyVaultCSI.enabled }}
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true
            {{- end }}
            {{- if and .Values.redisTls.enabled (eq .Values.cloud "google") }}
            - name: redis-tls-ca
              mountPath: "/etc/redis"
              readOnly: true
            {{- end }}
          {{- end }}
      {{- if or .Values.azureKeyVaultCSI.enabled (and .Values.redisTls.enabled (eq .Values.cloud "google")) }}
      volumes:
        {{- if and .Values.redisTls.enabled (eq .Values.cloud "google") }}
        - name: redis-tls-ca
          projected:
            sources:
              - secret:
                  name: "braintrust-secrets"
                  items:
                    - key: "REDIS_CA_PEM"
                      path: "redis-bundle.pem"
        {{- end }}
        {{- if .Values.azureKeyVaultCSI.enabled }}
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.azureKeyVaultCSI.name }}
        {{- end }}
      {{- end }}

