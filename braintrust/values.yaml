# Global configs
global:
  orgName: "<your org name on Braintrust>"
  namespace: "braintrust"
  namespaceAnnotations: {}
  labels: {}

# Cloud provider configuration
cloud: "aws"  # or "azure"

objectStorage:
  # Azure specific configuration
  azure:
    # This should come from the terraform module
    storageAccountName: ""
    # These are the default container names used by the terraform module
    brainstoreContainer: "brainstore"
    responseContainer: "responses"
    codeBundleContainer: "code-bundles"

  # AWS specific configuration
  aws:
    # This should come from the terraform module
    brainstoreBucket: ""
    responseBucket: ""
    codeBundleBucket: ""

api:
  name: "braintrust-api"
  labels: {}
  annotations:
    configmap: {}
    deployment: {}
    service: {}
    pod: {}
    serviceaccount: {}
  replicas: 2
  image:
    repository: public.ecr.aws/braintrust/standalone-api
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8000
  serviceAccount:
    name: "braintrust-api"
    awsRoleArn: ""
    azureClientId: ""
  resources:
    requests:
      cpu: "2"
      memory: "4Gi"
    limits:
      cpu: "4"
      memory: "8Gi"
  # Allow running user generated code functions (e.g. scorers/tools)
  allowCodeFunctionExecution: true
  # Brainstore backfill configuration. These defaults are fine for most cases.
  enableHistoricalFullBackfill: true
  backfillNewObjects: true
  backfillDisableHistorical: false
  backfillDisableNonhistorical: false
  extraEnvVars:
    # Example:
    # - name: MY_ENV_VAR
    #   value: "my-value"
    # - name: ANOTHER_VAR
    #   value: "another-value"

# Brainstore configuration
brainstore:
  enabled: true
  name: "brainstore"
  labels: {}
  annotations:
    configmap: {}
    deployment: {}
    service: {}
    pod: {}
    serviceaccount: {}
  replicas: 1
  image:
    repository: public.ecr.aws/braintrust/brainstore
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 4000
  serviceAccount:
    name: "brainstore"
    awsRoleArn: ""
    azureClientId: ""
  resources:
    requests:
      cpu: "8"
      memory: "16Gi"
    limits:
      cpu: "16"
      memory: "32Gi"
  cacheDir: "/mnt/tmp/brainstore"
  objectStoreCacheMemoryLimit: "1Gi"
  objectStoreCacheFileSize: "50Gi"
  verbose: true
  extraEnvVars:
    # Example:
    # - name: MY_ENV_VAR
    #   value: "my-value"
    # - name: ANOTHER_VAR
    #   value: "another-value"

# Optional Azure Key Vault CSI configuration for syncing secrets from Azure Key Vault
azureKeyVaultCSI:
  # Set to true to enable Azure Key Vault CSI secret syncing
  enabled: false

  # Name of your Azure Key Vault.
  # If you use our terraform module, this will be "<deployment-name>-kv" with a default value of "braintrust-kv"
  name: "braintrust-kv"

  clientID: ""
  tenantId: ""

  # Map your Key Vault secret names to the required Kubernetes secret keys
  # Example: If your Redis URL is stored as "my-redis-connection" in Key Vault, set:
  #   keyVaultSecretName: "my-redis-connection"
  #   kubernetesSecretKey: "REDIS_URL"
  # These defaults assume you are using the Braintrust terraform module to deploy the base infrastructure
  secrets:
    - keyVaultSecretName: "redis-connection-string"
      keyVaultSecretType: "secret"
      kubernetesSecretKey: "REDIS_URL"
    - keyVaultSecretName: "postgres-connection-string"
      kubernetesSecretKey: "PG_URL"
      keyVaultSecretType: "secret"
    - keyVaultSecretName: "brainstore-license-key"
      keyVaultSecretType: "secret"
      kubernetesSecretKey: "BRAINSTORE_LICENSE_KEY"
    - keyVaultSecretName: "function-secret-key"
      keyVaultSecretType: "secret"
      kubernetesSecretKey: "FUNCTION_SECRET_KEY"
    - keyVaultSecretName: "azure-storage-connection-string"
      keyVaultSecretType: "secret"
      kubernetesSecretKey: "AZURE_STORAGE_CONNECTION_STRING"

